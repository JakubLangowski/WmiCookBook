// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WmiCookBook.Data;

namespace WmiCookBook.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210208193544_Bonjour")]
    partial class Bonjour
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("WmiCookBook.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WmiCookBook.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Quantity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("WmiCookBook.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("WmiCookBook.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WmiCookBook.Models.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("WmiCookBook.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            PasswordHash = new byte[] { 47, 174, 101, 168, 104, 136, 140, 43, 19, 85, 179, 101, 163, 62, 131, 215, 210, 254, 136, 250, 25, 62, 123, 218, 96, 201, 38, 217, 149, 210, 249, 60, 63, 204, 240, 101, 102, 42, 234, 196, 77, 213, 19, 194, 238, 72, 92, 94, 210, 87, 153, 81, 9, 235, 191, 163, 171, 88, 216, 13, 243, 207, 170, 232 },
                            PasswordSalt = new byte[] { 150, 15, 201, 59, 39, 104, 61, 196, 155, 235, 225, 231, 239, 251, 59, 240, 94, 58, 234, 153, 2, 76, 161, 68, 115, 173, 142, 210, 168, 121, 91, 62, 235, 193, 148, 84, 104, 240, 79, 6, 3, 192, 226, 147, 147, 145, 56, 163, 111, 157, 51, 27, 245, 88, 210, 161, 235, 68, 118, 100, 11, 166, 30, 221, 172, 249, 149, 43, 158, 171, 135, 103, 80, 213, 102, 145, 238, 1, 59, 173, 114, 71, 159, 147, 125, 67, 30, 168, 163, 14, 43, 35, 29, 56, 220, 54, 9, 42, 10, 242, 148, 132, 102, 52, 177, 57, 104, 139, 183, 247, 124, 45, 99, 53, 206, 105, 8, 230, 86, 6, 234, 156, 101, 146, 219, 234, 76, 235 }
                        },
                        new
                        {
                            Id = 2,
                            Email = "moderator@gmail.com",
                            PasswordHash = new byte[] { 47, 174, 101, 168, 104, 136, 140, 43, 19, 85, 179, 101, 163, 62, 131, 215, 210, 254, 136, 250, 25, 62, 123, 218, 96, 201, 38, 217, 149, 210, 249, 60, 63, 204, 240, 101, 102, 42, 234, 196, 77, 213, 19, 194, 238, 72, 92, 94, 210, 87, 153, 81, 9, 235, 191, 163, 171, 88, 216, 13, 243, 207, 170, 232 },
                            PasswordSalt = new byte[] { 150, 15, 201, 59, 39, 104, 61, 196, 155, 235, 225, 231, 239, 251, 59, 240, 94, 58, 234, 153, 2, 76, 161, 68, 115, 173, 142, 210, 168, 121, 91, 62, 235, 193, 148, 84, 104, 240, 79, 6, 3, 192, 226, 147, 147, 145, 56, 163, 111, 157, 51, 27, 245, 88, 210, 161, 235, 68, 118, 100, 11, 166, 30, 221, 172, 249, 149, 43, 158, 171, 135, 103, 80, 213, 102, 145, 238, 1, 59, 173, 114, 71, 159, 147, 125, 67, 30, 168, 163, 14, 43, 35, 29, 56, 220, 54, 9, 42, 10, 242, 148, 132, 102, 52, 177, 57, 104, 139, 183, 247, 124, 45, 99, 53, 206, 105, 8, 230, 86, 6, 234, 156, 101, 146, 219, 234, 76, 235 }
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@gmail.com",
                            PasswordHash = new byte[] { 47, 174, 101, 168, 104, 136, 140, 43, 19, 85, 179, 101, 163, 62, 131, 215, 210, 254, 136, 250, 25, 62, 123, 218, 96, 201, 38, 217, 149, 210, 249, 60, 63, 204, 240, 101, 102, 42, 234, 196, 77, 213, 19, 194, 238, 72, 92, 94, 210, 87, 153, 81, 9, 235, 191, 163, 171, 88, 216, 13, 243, 207, 170, 232 },
                            PasswordSalt = new byte[] { 150, 15, 201, 59, 39, 104, 61, 196, 155, 235, 225, 231, 239, 251, 59, 240, 94, 58, 234, 153, 2, 76, 161, 68, 115, 173, 142, 210, 168, 121, 91, 62, 235, 193, 148, 84, 104, 240, 79, 6, 3, 192, 226, 147, 147, 145, 56, 163, 111, 157, 51, 27, 245, 88, 210, 161, 235, 68, 118, 100, 11, 166, 30, 221, 172, 249, 149, 43, 158, 171, 135, 103, 80, 213, 102, 145, 238, 1, 59, 173, 114, 71, 159, 147, 125, 67, 30, 168, 163, 14, 43, 35, 29, 56, 220, 54, 9, 42, 10, 242, 148, 132, 102, 52, 177, 57, 104, 139, 183, 247, 124, 45, 99, 53, 206, 105, 8, 230, 86, 6, 234, 156, 101, 146, 219, 234, 76, 235 }
                        });
                });

            modelBuilder.Entity("WmiCookBook.Models.Ingredient", b =>
                {
                    b.HasOne("WmiCookBook.Models.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WmiCookBook.Models.Recipe", b =>
                {
                    b.HasOne("WmiCookBook.Models.Category", "Category")
                        .WithMany("Recipes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WmiCookBook.Models.RefreshToken", b =>
                {
                    b.HasOne("WmiCookBook.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WmiCookBook.Models.Step", b =>
                {
                    b.HasOne("WmiCookBook.Models.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WmiCookBook.Models.Category", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("WmiCookBook.Models.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WmiCookBook.Data;

namespace WmiCookBook.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210205124659_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("WmiCookBook.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WmiCookBook.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Quantity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("WmiCookBook.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("WmiCookBook.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WmiCookBook.Models.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("WmiCookBook.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            PasswordHash = new byte[] { 105, 97, 106, 158, 214, 35, 146, 117, 156, 235, 142, 97, 121, 62, 47, 235, 50, 66, 106, 174, 163, 121, 74, 161, 230, 156, 116, 64, 180, 37, 75, 7, 5, 91, 154, 245, 105, 12, 20, 117, 194, 138, 155, 210, 101, 42, 129, 202, 191, 31, 241, 67, 162, 39, 152, 58, 134, 56, 165, 57, 141, 38, 44, 159 },
                            PasswordSalt = new byte[] { 76, 41, 30, 95, 20, 173, 59, 106, 135, 126, 51, 241, 3, 1, 48, 168, 98, 127, 226, 135, 3, 17, 35, 124, 90, 169, 28, 106, 207, 25, 70, 194, 120, 62, 2, 233, 177, 88, 178, 10, 158, 222, 77, 93, 66, 172, 117, 139, 204, 118, 148, 104, 137, 232, 148, 46, 197, 134, 60, 35, 169, 122, 237, 134, 221, 13, 215, 248, 252, 85, 236, 103, 31, 66, 252, 129, 228, 108, 191, 118, 142, 125, 224, 48, 243, 187, 202, 184, 47, 115, 139, 140, 82, 116, 5, 148, 102, 30, 31, 216, 8, 227, 243, 249, 37, 197, 160, 46, 151, 86, 214, 236, 94, 51, 41, 159, 5, 219, 208, 212, 150, 237, 180, 154, 181, 92, 122, 45 }
                        },
                        new
                        {
                            Id = 2,
                            Email = "moderator@gmail.com",
                            PasswordHash = new byte[] { 105, 97, 106, 158, 214, 35, 146, 117, 156, 235, 142, 97, 121, 62, 47, 235, 50, 66, 106, 174, 163, 121, 74, 161, 230, 156, 116, 64, 180, 37, 75, 7, 5, 91, 154, 245, 105, 12, 20, 117, 194, 138, 155, 210, 101, 42, 129, 202, 191, 31, 241, 67, 162, 39, 152, 58, 134, 56, 165, 57, 141, 38, 44, 159 },
                            PasswordSalt = new byte[] { 76, 41, 30, 95, 20, 173, 59, 106, 135, 126, 51, 241, 3, 1, 48, 168, 98, 127, 226, 135, 3, 17, 35, 124, 90, 169, 28, 106, 207, 25, 70, 194, 120, 62, 2, 233, 177, 88, 178, 10, 158, 222, 77, 93, 66, 172, 117, 139, 204, 118, 148, 104, 137, 232, 148, 46, 197, 134, 60, 35, 169, 122, 237, 134, 221, 13, 215, 248, 252, 85, 236, 103, 31, 66, 252, 129, 228, 108, 191, 118, 142, 125, 224, 48, 243, 187, 202, 184, 47, 115, 139, 140, 82, 116, 5, 148, 102, 30, 31, 216, 8, 227, 243, 249, 37, 197, 160, 46, 151, 86, 214, 236, 94, 51, 41, 159, 5, 219, 208, 212, 150, 237, 180, 154, 181, 92, 122, 45 }
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@gmail.com",
                            PasswordHash = new byte[] { 105, 97, 106, 158, 214, 35, 146, 117, 156, 235, 142, 97, 121, 62, 47, 235, 50, 66, 106, 174, 163, 121, 74, 161, 230, 156, 116, 64, 180, 37, 75, 7, 5, 91, 154, 245, 105, 12, 20, 117, 194, 138, 155, 210, 101, 42, 129, 202, 191, 31, 241, 67, 162, 39, 152, 58, 134, 56, 165, 57, 141, 38, 44, 159 },
                            PasswordSalt = new byte[] { 76, 41, 30, 95, 20, 173, 59, 106, 135, 126, 51, 241, 3, 1, 48, 168, 98, 127, 226, 135, 3, 17, 35, 124, 90, 169, 28, 106, 207, 25, 70, 194, 120, 62, 2, 233, 177, 88, 178, 10, 158, 222, 77, 93, 66, 172, 117, 139, 204, 118, 148, 104, 137, 232, 148, 46, 197, 134, 60, 35, 169, 122, 237, 134, 221, 13, 215, 248, 252, 85, 236, 103, 31, 66, 252, 129, 228, 108, 191, 118, 142, 125, 224, 48, 243, 187, 202, 184, 47, 115, 139, 140, 82, 116, 5, 148, 102, 30, 31, 216, 8, 227, 243, 249, 37, 197, 160, 46, 151, 86, 214, 236, 94, 51, 41, 159, 5, 219, 208, 212, 150, 237, 180, 154, 181, 92, 122, 45 }
                        });
                });

            modelBuilder.Entity("WmiCookBook.Models.Ingredient", b =>
                {
                    b.HasOne("WmiCookBook.Models.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WmiCookBook.Models.Recipe", b =>
                {
                    b.HasOne("WmiCookBook.Models.Category", "Category")
                        .WithMany("Recipes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WmiCookBook.Models.RefreshToken", b =>
                {
                    b.HasOne("WmiCookBook.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WmiCookBook.Models.Step", b =>
                {
                    b.HasOne("WmiCookBook.Models.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WmiCookBook.Models.Category", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("WmiCookBook.Models.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}

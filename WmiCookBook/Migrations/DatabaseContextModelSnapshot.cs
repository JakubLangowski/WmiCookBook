// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WmiCookBook.Data;

namespace WmiCookBook.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("WmiCookBook.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WmiCookBook.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            PasswordHash = new byte[] { 152, 93, 155, 139, 80, 201, 37, 106, 105, 2, 67, 139, 238, 17, 124, 253, 152, 235, 129, 78, 137, 119, 87, 103, 30, 104, 122, 208, 154, 104, 234, 200, 76, 206, 195, 157, 112, 239, 16, 73, 41, 20, 238, 245, 167, 158, 98, 12, 172, 220, 221, 182, 219, 210, 38, 79, 188, 116, 214, 205, 47, 220, 39, 121 },
                            PasswordSalt = new byte[] { 138, 114, 149, 134, 106, 96, 197, 152, 76, 162, 97, 20, 29, 227, 194, 238, 97, 54, 254, 165, 234, 45, 41, 10, 5, 32, 174, 103, 66, 38, 76, 60, 168, 92, 105, 127, 26, 205, 34, 233, 90, 152, 77, 72, 61, 156, 119, 63, 236, 26, 148, 212, 250, 23, 61, 242, 113, 169, 200, 180, 229, 182, 199, 233, 17, 236, 37, 146, 119, 173, 164, 141, 153, 191, 136, 38, 81, 208, 150, 89, 179, 183, 93, 51, 38, 107, 73, 92, 47, 216, 192, 188, 102, 168, 254, 236, 221, 147, 19, 169, 201, 194, 183, 115, 253, 20, 63, 82, 113, 88, 24, 195, 194, 53, 238, 159, 154, 254, 216, 67, 74, 19, 82, 107, 84, 222, 136, 74 }
                        },
                        new
                        {
                            Id = 2,
                            Email = "moderator@gmail.com",
                            PasswordHash = new byte[] { 152, 93, 155, 139, 80, 201, 37, 106, 105, 2, 67, 139, 238, 17, 124, 253, 152, 235, 129, 78, 137, 119, 87, 103, 30, 104, 122, 208, 154, 104, 234, 200, 76, 206, 195, 157, 112, 239, 16, 73, 41, 20, 238, 245, 167, 158, 98, 12, 172, 220, 221, 182, 219, 210, 38, 79, 188, 116, 214, 205, 47, 220, 39, 121 },
                            PasswordSalt = new byte[] { 138, 114, 149, 134, 106, 96, 197, 152, 76, 162, 97, 20, 29, 227, 194, 238, 97, 54, 254, 165, 234, 45, 41, 10, 5, 32, 174, 103, 66, 38, 76, 60, 168, 92, 105, 127, 26, 205, 34, 233, 90, 152, 77, 72, 61, 156, 119, 63, 236, 26, 148, 212, 250, 23, 61, 242, 113, 169, 200, 180, 229, 182, 199, 233, 17, 236, 37, 146, 119, 173, 164, 141, 153, 191, 136, 38, 81, 208, 150, 89, 179, 183, 93, 51, 38, 107, 73, 92, 47, 216, 192, 188, 102, 168, 254, 236, 221, 147, 19, 169, 201, 194, 183, 115, 253, 20, 63, 82, 113, 88, 24, 195, 194, 53, 238, 159, 154, 254, 216, 67, 74, 19, 82, 107, 84, 222, 136, 74 }
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@gmail.com",
                            PasswordHash = new byte[] { 152, 93, 155, 139, 80, 201, 37, 106, 105, 2, 67, 139, 238, 17, 124, 253, 152, 235, 129, 78, 137, 119, 87, 103, 30, 104, 122, 208, 154, 104, 234, 200, 76, 206, 195, 157, 112, 239, 16, 73, 41, 20, 238, 245, 167, 158, 98, 12, 172, 220, 221, 182, 219, 210, 38, 79, 188, 116, 214, 205, 47, 220, 39, 121 },
                            PasswordSalt = new byte[] { 138, 114, 149, 134, 106, 96, 197, 152, 76, 162, 97, 20, 29, 227, 194, 238, 97, 54, 254, 165, 234, 45, 41, 10, 5, 32, 174, 103, 66, 38, 76, 60, 168, 92, 105, 127, 26, 205, 34, 233, 90, 152, 77, 72, 61, 156, 119, 63, 236, 26, 148, 212, 250, 23, 61, 242, 113, 169, 200, 180, 229, 182, 199, 233, 17, 236, 37, 146, 119, 173, 164, 141, 153, 191, 136, 38, 81, 208, 150, 89, 179, 183, 93, 51, 38, 107, 73, 92, 47, 216, 192, 188, 102, 168, 254, 236, 221, 147, 19, 169, 201, 194, 183, 115, 253, 20, 63, 82, 113, 88, 24, 195, 194, 53, 238, 159, 154, 254, 216, 67, 74, 19, 82, 107, 84, 222, 136, 74 }
                        });
                });

            modelBuilder.Entity("WmiCookBook.Models.RefreshToken", b =>
                {
                    b.HasOne("WmiCookBook.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
